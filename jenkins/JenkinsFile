@Library('jenkins-shared-lib') _
pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  environment {
    PATH = "/Library/apache-maven-3.8.8/bin:/Applications/Docker.app/Contents/Resources/bin:${env.PATH}"
    SONAR_URL = "http://localhost:9000"
    DOCKER_IMAGE = "yogeshk04/springboot-cicd:${BUILD_NUMBER}"
    DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    GIT_REPO_NAME = "java-maven-sonar-argocd-helm-project"
    GIT_USER_NAME = "yogeshk04"
  }
  // Stagesh starts here
  stages {
    // First State
    stage('1 - Git Checkout') {
      steps {
        gitCheckout(
          branch: "master",
          url: "https://github.com/yogeshk04/java-maven-sonar-argocd-helm-project.git"
        )
      }
    }

    // Second Stage
    stage('2 - Unit test maven') {
      steps {
        script{
          sh """
          cd spring-boot-app
          mvn test
          """
        }
      }
    }

    // Third Stage
    stage('3 - Clean Package') {
      steps {
        script{
          sh """
          cd spring-boot-app
          mvn clean package
          """
        }
      }
    }

    // Fourth Stage
    stage('4 - Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    // Fifth Stage
    stage('5 - Docker image build') {    
      steps {
        script {
          sh 'cd spring-boot-app && docker build --platform linux/amd64 -t ${DOCKER_IMAGE} .'
        }
      }
    }

    // Sixth Stage
    stage('6 - Docker Login') {
      steps {
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
      }
    }

    // Seventh Stage
    stage('7 - Docker image push') {
      steps {
        sh 'docker push ${DOCKER_IMAGE}'
      }
    }

    // Eighth Stage
    stage('8 - Docker image clean') {      
      steps {
        script {
          sh 'docker rmi ${DOCKER_IMAGE}'            
        }
      }
    }

    // Ninth Stage
    stage('9 - Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
          sh """
            git config user.email "yogeshk04@gmail.com"
            git config user.name "Yogsh Nikam"
            IMAGE_TAG=${BUILD_NUMBER}
            sed -i 's/replaceImageTag/${IMAGE_TAG}/g' k8s-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-project/k8s-manifests/deployment.yml
            git commit -m "Update deployment image to version ${IMAGE_TAG}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
          """
        }
      }
    }
  }
    // Post Action
    post {
      always {
        sh 'docker logout'
      }
    }
}
